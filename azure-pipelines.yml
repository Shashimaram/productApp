# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
- main

variables:
  commit: NONE

pool:
  vmImage: ubuntu-latest

stages:
- stage:
  jobs:
  - job:
    steps:
      - bash: |
          sourceVersionMessage="$(Build.SourceVersionMessage)"
          extractedString=${sourceVersionMessage:0:5}
          echo "The first 5 characters are: $extractedString"
          echo '##vso[task.setvariable variable=commit]'$extractedString
      - script: |
          echo "Setting filePath and repo_name based on commit message..."
          if [[ "$(commit)" == *"bkend"* ]]; then
            echo "##vso[task.setvariable variable=filePath;isOutput=true]**/backend/Dockerfile"
            echo "##vso[task.setvariable variable=repo_name;isOutput=true]shashidher/product_backend"
          elif [[ "$(commit)" == *"ftend"* ]]; then
            echo "##vso[task.setvariable variable=filePath;isOutput=true]**/frontend/Dockerfile"
            echo "##vso[task.setvariable variable=repo_name;isOutput=true]shashidher/frontend_backend"
          fi
        displayName: 'Set filePath and repo_name variables'
      - script: |
          echo "Commit: $(commit)"
          echo "Repo Name: $(repo_name)"
          echo "File Path: $(filePath)"



- stage: buildPush
  # condition: or(eq(variables['commit'], 'ftend'), eq(variables['commit'], 'bkend'))
  jobs:
  - job: var_test
    steps:
    - script: |
        echo "Commit: $(dependencies.build.setVars.outputs['commit'])"
        echo "Repo Name: $(dependencies.build.setVars.outputs['repo_name'])"
        echo "File Path: $(dependencies.build.setVars.outputs['filePath'])"
      displayName: Debug Variables
  - job: installingDockerCli
    steps:
      - task: DockerInstaller@0
        inputs:
          dockerVersion: '17.09.0-ce'
      - task: Docker@2
        inputs:
          containerRegistry: 'mydockerhub'
          repository: $(repo_name)
          command: 'buildAndPush'
          Dockerfile: $(filePath)
          tags: '$(Build.BuildId)'
          addPipelineData: true
      - script: sudo docker images
        displayName: checkingDockerImages

- stage: ScanningImage
  dependsOn: buildPush
  jobs:
    - job: installingTrivyOnAgent
      steps:
        - task: DockerInstaller@0
          inputs:
              dockerVersion: '17.09.0-ce'
        - task: Docker@2
          inputs:
            containerRegistry: 'mydockerhub'
            command: 'login'
        - script: |
            sudo apt-get install wget apt-transport-https gnupg lsb-release
            wget -qO - https://aquasecurity.github.io/trivy-repo/deb/public.key | sudo apt-key add -
            echo deb https://aquasecurity.github.io/trivy-repo/deb $(lsb_release -sc) main | sudo tee -a /etc/apt/sources.list.d/trivy.list
            sudo apt-get update
            sudo apt-get install trivy
        
        - script: |
            trivy image --severity HIGH,CRITICAL --format template --template "@./template/junit.tpl" -o junit-test.xml $(repo_name):'$(Build.BuildId)'
          displayName: scanning Image

        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/**-test.xml'
            mergeTestResults: true
            failTaskOnFailedTests: false
            testRunTitle: 'Trivy Vulnerabilities'
          condition: 'always()'